/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * OpenAPI spec version: 1.0.0
 */
import Axios from 'axios';
import type {
  AxiosInstance,
  AxiosRequestConfig,
  AxiosResponse,
  CreateAxiosDefaults,
} from 'axios';

export type DistEndpointsUserListUserListNoPathOutputItem = {
  id: number;
  name: string;
  email: string;
};

export type DistEndpointsUserListUserListNoPathOutput =
  DistEndpointsUserListUserListNoPathOutputItem[];

export type UserListWithPathNoSuffixOutputItem = {
  id: number;
  name: string;
  email: string;
};

export type UserListWithPathNoSuffixOutput =
  UserListWithPathNoSuffixOutputItem[];

export type UserListWithPathOutputItem = {
  id: number;
  name: string;
  email: string;
};

export type UserListWithPathOutput = UserListWithPathOutputItem[];

export interface AuthLoginInput {
  email: string;
  password: string;
}

export interface AuthLoginOutput {
  token: string;
}

export type UserAppointmentCountOutput = number;

export interface UserAppointmentCreateInput {
  userId: number;
  date: string;
}

export interface UserAppointmentCreate201Output {
  id: number;
  date: string;
  address: string;
}

export type UserAppointmentCreate400OutputAnyOf = {
  message: string;
  errorCode: string;
};

export type UserAppointmentCreate400Output =
  | string
  | UserAppointmentCreate400OutputAnyOf;

export interface UserCreateInput {
  name: string;
  email: string;
}

export interface UserCreateOutput {
  id: number;
}

/**
 * @nullable
 */
export type UserFindOutput = {
  id: number;
  name: string;
  email: string;
} | null;

/**
 * @nullable
 */
export type UserGetOutput = {
  id: number;
  name: string;
  email: string;
} | null;

export type UserListForRouterWithPathOutputItem = {
  id: number;
  name: string;
  email: string;
};

export type UserListForRouterWithPathOutput =
  UserListForRouterWithPathOutputItem[];

export type UserAppointmentCountParams = {
  userId: number;
};

export type UserFindParams = {
  id: number;
};

export type UserGetParams = {
  id: number;
};

export const createApiClient = (
  config?: CreateAxiosDefaults | AxiosInstance,
) => {
  const axios =
    config &&
    'defaults' in config &&
    'interceptors' in config &&
    typeof config.request === 'function'
      ? config
      : Axios.create(config as CreateAxiosDefaults);

  const authLogin = <TData = AxiosResponse<AuthLoginOutput>>(
    authLoginInput: AuthLoginInput,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.post(`/auth/login`, authLoginInput, options);
  };

  const testError = <TData = AxiosResponse<void>>(
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.get(`/test/error`, options);
  };

  const testStatus = <TData = AxiosResponse<void>>(
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.get(`/test/status`, options);
  };

  const userAppointmentCount = <
    TData = AxiosResponse<UserAppointmentCountOutput>,
  >(
    params: UserAppointmentCountParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.get(`/user/appointment/count`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  /**
   * @summary Create an appointment
   */
  const userAppointmentCreate = <
    TData = AxiosResponse<UserAppointmentCreate201Output>,
  >(
    userAppointmentCreateInput: UserAppointmentCreateInput,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.post(
      `/user/appointment/create`,
      userAppointmentCreateInput,
      options,
    );
  };

  const userCreate = <TData = AxiosResponse<UserCreateOutput>>(
    userCreateInput: UserCreateInput,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.post(`/user/create`, userCreateInput, options);
  };

  const userFind = <TData = AxiosResponse<UserFindOutput>>(
    params: UserFindParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.get(`/user/find`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const userGet = <TData = AxiosResponse<UserGetOutput>>(
    params: UserGetParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.get(`/user/get`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  const userListForRouterWithPath = <
    TData = AxiosResponse<UserListForRouterWithPathOutput>,
  >(
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.get(`/user/list-for-router-with-path`, options);
  };

  const userPurge = <TData = AxiosResponse<void>>(
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.post(`/user/purge`, undefined, options);
  };

  const distEndpointsUserListUserListNoPath = <
    TData = AxiosResponse<DistEndpointsUserListUserListNoPathOutput>,
  >(
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.get(
      `/dist/endpoints/user/list/user-list-no-path`,
      options,
    );
  };

  const userListWithPath = <TData = AxiosResponse<UserListWithPathOutput>>(
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.get(`/user/list-with-path`, options);
  };

  const userListWithPathNoSuffix = <
    TData = AxiosResponse<UserListWithPathNoSuffixOutput>,
  >(
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.get(`/user/list-with-path-no-suffix`, options);
  };

  return {
    authLogin,
    testError,
    testStatus,
    userAppointmentCount,
    userAppointmentCreate,
    userCreate,
    userFind,
    userGet,
    userListForRouterWithPath,
    userPurge,
    distEndpointsUserListUserListNoPath,
    userListWithPath,
    userListWithPathNoSuffix,
    axios,
  };
};
export type AuthLoginResult = AxiosResponse<AuthLoginOutput>;
export type TestErrorResult = AxiosResponse<void>;
export type TestStatusResult = AxiosResponse<void>;
export type UserAppointmentCountResult =
  AxiosResponse<UserAppointmentCountOutput>;
export type UserAppointmentCreateResult =
  AxiosResponse<UserAppointmentCreate201Output>;
export type UserCreateResult = AxiosResponse<UserCreateOutput>;
export type UserFindResult = AxiosResponse<UserFindOutput>;
export type UserGetResult = AxiosResponse<UserGetOutput>;
export type UserListForRouterWithPathResult =
  AxiosResponse<UserListForRouterWithPathOutput>;
export type UserPurgeResult = AxiosResponse<void>;
export type DistEndpointsUserListUserListNoPathResult =
  AxiosResponse<DistEndpointsUserListUserListNoPathOutput>;
export type UserListWithPathResult = AxiosResponse<UserListWithPathOutput>;
export type UserListWithPathNoSuffixResult =
  AxiosResponse<UserListWithPathNoSuffixOutput>;
