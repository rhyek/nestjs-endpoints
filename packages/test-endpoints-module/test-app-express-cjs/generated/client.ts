/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * OpenAPI spec version: 1.0.0
 */
import { customInstance } from './custom-axios-instance';
export interface UserCreateInput {
  name: string;
  email: string;
}

export interface UserCreateOutput {
  id: number;
}

/**
 * @nullable
 */
export type UserFindOutput = {
  id: number;
  name: string;
  email: string;
} | null;

export interface UserAppointmentCreateInput {
  userId: number;
  date: unknown;
}

export interface UserAppointmentCreate201Output {
  id: number;
  date: unknown;
  address: string;
}

export type UserAppointmentCreate400OutputOneOf = {
  message: string;
  errorCode: string;
};

export type UserAppointmentCreate400Output =
  | string
  | UserAppointmentCreate400OutputOneOf;

export type UserAppointmentCountOutput = number;

export type UserFindParams = {
  id: number;
};

export type UserAppointmentCountParams = {
  userId: number;
};

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const userCreate = (
  userCreateInput: UserCreateInput,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<UserCreateOutput>(
    {
      url: `/user/create`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: userCreateInput,
    },
    options,
  );
};

export const userFind = (
  params: UserFindParams,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<UserFindOutput>(
    { url: `/user/find`, method: 'GET', params },
    options,
  );
};

/**
 * @summary Create an appointment
 */
export const userAppointmentCreate = (
  userAppointmentCreateInput: UserAppointmentCreateInput,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<UserAppointmentCreate201Output>(
    {
      url: `/user/appointment/create`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: userAppointmentCreateInput,
    },
    options,
  );
};

export const userAppointmentCount = (
  params: UserAppointmentCountParams,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<UserAppointmentCountOutput>(
    { url: `/user/appointment/count`, method: 'GET', params },
    options,
  );
};

export const testError = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    { url: `/test/error`, method: 'GET' },
    options,
  );
};

export const testStatus = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    { url: `/test/status`, method: 'GET' },
    options,
  );
};

export type UserCreateResult = NonNullable<
  Awaited<ReturnType<typeof userCreate>>
>;
export type UserFindResult = NonNullable<
  Awaited<ReturnType<typeof userFind>>
>;
export type UserAppointmentCreateResult = NonNullable<
  Awaited<ReturnType<typeof userAppointmentCreate>>
>;
export type UserAppointmentCountResult = NonNullable<
  Awaited<ReturnType<typeof userAppointmentCount>>
>;
export type TestErrorResult = NonNullable<
  Awaited<ReturnType<typeof testError>>
>;
export type TestStatusResult = NonNullable<
  Awaited<ReturnType<typeof testStatus>>
>;
